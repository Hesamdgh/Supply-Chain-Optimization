# Optimization of the difference between scheduled delivery date and delivery to client dateimport subprocessimport sysdef install_pulp():    subprocess.check_call([sys.executable, "-m", "pip", "install", "pulp"])install_pulp()from django.core.management.base import BaseCommandfrom django.db.models import F, Q, Sum, ExpressionWrapper, FloatFieldfrom django.db.models.functions import Castfrom pulp import LpProblem, LpMinimize, LpVariable, lpSumfrom routes.models import ShipmentRouteimport pandas as pdfrom openpyxl import load_workbookfrom openpyxl.styles import Fontdef optimize_routes():    # Assuming 'routes' is a queryset of ShipmentRoute objects    routes = ShipmentRoute.objects.all()    optimized_results = []    # Define decision variables    shipment_modes = routes.values_list('shipment_mode', flat=True).distinct()    vendors = routes.values_list('vendor', flat=True).distinct()    brands = routes.values_list('brand', flat=True).distinct()    origins = routes.values_list('origin', flat=True).distinct()    x = {(i, j, k): LpVariable(f"x_{i}_{j}_{k}", cat='Binary') for i in shipment_modes for j in vendors for k in brands}    # Initialize the optimization problem    prob = LpProblem("Shipment Optimization", LpMinimize)    # Objective function: Minimize the difference between scheduled and actual delivery dates    for country in origins:        prob += lpSum([            (route.delivered_to_client_date - route.scheduled_delivery_date).days * x[(i, j, k)]            for i in shipment_modes            for j in vendors            for k in brands            for route in routes.filter(origin=country, shipment_mode=i, vendor=j, brand=k)        ])        # Constraints        current_weight = routes.filter(origin=country).aggregate(total_weight=Sum('weight_kg'))['total_weight']        current_freight_cost = routes.filter(origin=country).aggregate(total_freight_cost=Sum('freight_cost_usd'))['total_freight_cost']        # Weight constraint        prob += lpSum([            route.weight_kg * x[(i, j, k)]            for i in shipment_modes            for j in vendors            for k in brands            for route in routes.filter(origin=country, shipment_mode=i, vendor=j, brand=k)        ]) >= 0.9 * current_weight        # Freight cost constraint        prob += lpSum([            route.freight_cost_usd * x[(i, j, k)]            for i in shipment_modes            for j in vendors            for k in brands            for route in routes.filter(origin=country, shipment_mode=i, vendor=j, brand=k)        ]) <= 1.2 * current_freight_cost    # Solve the problem    prob.solve()    # Output the optimized results    for i, j, k in x:        if x[(i, j, k)].value() == 1:            optimized_route = routes.filter(shipment_mode=i, vendor=j, brand=k).first()            optimized_results.append({                'Country': optimized_route.origin,                'Brand': k,                'Optimized Shipment Mode': i,                'Vendor': j            })    # Convert the results to a DataFrame    df = pd.DataFrame(optimized_results)    # Export the DataFrame to an Excel sheet    output_file = 'optimized_routes.xlsx'    df.to_excel(output_file, index=False)    # Load the workbook and select the active sheet    wb = load_workbook(output_file)    ws = wb.active    # Add a title to the sheet    ws.insert_rows(1)    ws['A1'] = 'Optimized Shipping Modes and Vendors'    ws['A1'].font = Font(size=14, bold=True)    # Adjust column widths    for column in ws.columns:        max_length = 0        column = [cell for cell in column]        for cell in column:            try:                if len(str(cell.value)) > max_length:                    max_length = len(cell.value)            except:                pass        adjusted_width = (max_length + 2)        ws.column_dimensions[column[0].column_letter].width = adjusted_width    # Save the workbook    wb.save(output_file)    print(f'Optimized results have been exported to {output_file} with formatting.')class Command(BaseCommand):    help = 'Optimize shipment routes'    def handle(self, *args, **options):        # Step 1: Data Cleaning        # Convert "Freight Included in Commodity Cost" to 0        ShipmentRoute.objects.filter(weight_kg__contains="Freight Included in Commodity Cost").update(weight_kg='0')        ShipmentRoute.objects.filter(freight_cost_usd__contains="Freight Included in Commodity Cost").update(freight_cost_usd='0')        # Remove rows with 'Invoiced Separately' or 'Weight Captured Separately'        ShipmentRoute.objects.filter(Q(weight_kg__contains="Invoiced Separately") | Q(weight_kg__contains="Weight Captured Separately")).delete()        ShipmentRoute.objects.filter(Q(freight_cost_usd__contains="Invoiced Separately") | Q(freight_cost_usd__contains="Weight Captured Separately")).delete()        # Replace 'ID#:' with the corresponding numeric value from the appropriate row        routes = ShipmentRoute.objects.all()        for route in routes:            if "ID#:" in route.weight_kg:                id_value = route.weight_kg.split("ID#:")[-1].strip()                matched_route = ShipmentRoute.objects.filter(code=id_value).first()                if matched_route:                    route.weight_kg = matched_route.weight_kg                else:                    route.delete()            if "ID#:" in route.freight_cost_usd:                id_value = route.freight_cost_usd.split("ID#:")[-1].strip()                matched_route = ShipmentRoute.objects.filter(code=id_value).first()                if matched_route:                    route.freight_cost_usd = matched_route.freight_cost_usd                else:                    route.delete()            route.save()        # Step 2: Ensure numeric fields        routes = ShipmentRoute.objects.annotate(            weight_kg_num=Cast('weight_kg', FloatField()),            freight_cost_usd_num=Cast('freight_cost_usd', FloatField())        ).filter(weight_kg_num__isnull=False, freight_cost_usd_num__isnull=False)        # Step 3: Optimization        optimize_routes()